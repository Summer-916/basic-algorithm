1. 线性表的定义与特点

定义
线性表(Linear List): 由n(n>=0)个数据元素(节点)a1,a2,...,an组成的有限序列

相关概念
1,2,...,n 下标，表示元素在表中的位置
a1 起始节点
an 终端节点
ai-1 ai的直接前驱
ai+1 ai的直接后继
n 元素总数，即表长
n=0 空表

特点
同一线性表中的元素必定具有相同特性,数据元素之间的关系是线性关系(至多一个前驱或后继)
在非空线性表中,有且仅有一个起始节点与终端节点,每个内部节点都有且仅有一个直接前驱与直接后继

2. 线性表的类型定义(ADT定义 - 具体实现在确定存储结构后完成)

ADT List{
    数据对象: D = {ai | ai属于Elemset,(i = 1,2,...,n,n>=0)}
    数据关系: R = {<ai-1,ai> | ai-1,ai属于D,(i = 1,2,...,n,n>=0)} //<ai-1,ai> 表示ai-1与ai之间存在序偶关系,是一种有序关系
    基本操作:
    InitList(&L)
    - 初始条件: 无 
    - 操作结果: 线性表初始化,即构造一个空线性表
    DestoryList(&L)
    - 初始条件: 线性表L已存在
    - 操作结果: 销毁线性表L
    ClearList(&L)
    - 初始条件: 线性表L已存在
    - 操作结果: 将L重置为空表
    ListEmpty(L)
    - 初始条件: 线性表L已存在
    - 操作结果: 返回"线性表为空"的布尔值
    ListLength(L)
    - 初始条件: 线性表L已存在
    - 操作结果: 返回L的元素个数
    GetElem(L,i,&e)
    - 初始条件: 线性表L已存在,1<=i<=ListLength(L)
    - 操作结果: 用e返回线性表中第i个元素的值
    LocateElem(L,e,compare())
    - 初始条件: 线性表L已存在,compare()是一种判定条件
    - 操作结果: 返回L中第一个与e满足compare()的数据元素的位序,若无,则返回0
    PriorElem(L,cur_e,&pre_e)
    - 初始条件: 线性表L已存在
    - 操作结果: 若cur_e是L的数据元素且不是第一个,则用pre_e返回它的前驱
    NextElem(L,cur_e,&next_e)
    - 初始条件: 线性表L已存在
    - 操作结果: 若cur_e是L的数据元素且不是最后一个,则用next_e返回它的后继
    ListInsert(&L,i,e)
    - 初始条件: 线性表L已存在,1<=i<=ListLength(L)+1
    - 操作结果: 在L的第i个位置之前插入新的元素e,L的长度增加1
    e.g. (a1,a2,...,ai-1,ai,...,an) -> (a1,a2,...,ai-1,e,ai,...,an) 第i个位置变为e
    ListDelete(&L,i,&e)
    - 初始条件: 线性表L已存在,1<=i<=ListLength(L)
    - 操作结果: 删除L的第i个数据元素,并用e返回其值,L的长度减1
    ListTraverse(&L,visited())
    - 初始条件: 线性表L已存在
    - 操作结果: 对L的每一个元素使用visited()访问
}

3-1. 线性表的顺序表示与实现
见代码