1.顺序表简介
顺序表（Sequence List）是一种常见的线性数据结构，用于存储一组具有相同类型的元素，并且元素之间有固定的顺序关系。
在C++中，可以使用数组或动态数组来实现顺序表。数组是一种静态数据结构，需要在定义时指定大小，而动态数组（例如std::vector）是一种动态大小可变的容器，使用起来更加灵活。
以下是顺序表的一些关键特点和操作：
元素类型：顺序表中的元素可以是任何类型，例如整数、浮点数、字符等。
大小：顺序表的大小是指存储在表中的元素数量。可以通过size()函数来获取顺序表的大小。
访问元素：可以使用索引来访问顺序表中的元素。索引从0开始，表示第一个元素，依次递增。例如，sequence[0]表示顺序表中的第一个元素。
插入元素：可以在顺序表的任意位置插入元素。使用insert()函数可以在指定位置插入元素，并将后续元素右移。
删除元素：可以从顺序表中删除指定位置的元素。使用erase()函数可以删除指定位置的元素，并将后续元素左移。
修改元素：可以通过索引来修改顺序表中的元素的值。例如，sequence[2] = 10将顺序表中索引为2的元素修改为10。
动态调整大小：使用动态数组（例如std::vector）实现的顺序表可以动态调整大小，根据需要自动分配或释放内存。
顺序表适用于需要快速访问元素、按照索引进行插入和删除操作的场景。然而，插入和删除操作的时间复杂度较高，可能需要移动大量元素，特别是在中间位置进行操作时。
需要注意的是，顺序表的大小是固定的，当元素数量超过当前容量时，需要进行扩容操作，以保证能够存储更多的元素。动态数组可以自动处理扩容和内存分配的细节，但在扩容时可能会涉及到内存重新分配和元素复制，因此需要考虑性能方面的影响。

2.数组与vector
(1)静态数组 - 普通数组
普通数组无法直接修改大小，不能直接插入，删除元素，因为静态数组的大小在定义时就确定好了。
(2)动态数组 - Vector
1. 构造函数：
   - vector()：创建一个空的std::vector。
   - vector(size_type count, const T& value = T())：创建一个包含count个元素的std::vector，每个元素都初始化为value。
   - vector(InputIt first, InputIt last)：创建一个包含范围 `[first, last)` 内元素的`std::vector。

2. 容量相关函数：
   - size()：返回std::vector中的元素数量。
   - empty()：检查std::vector是否为空。
   - resize(size_type count, T value = T())：修改std::vector的大小为count，如果新的大小大于当前大小，将会插入默认构造的元素；如果新的大小小于当前大小，将会删除多余的元素。
   - reserve(size_type new_cap）：请求std::vector的容量至少达到new_cap，如果new_cap超过当前容量，则重新分配存储空间。

3. 元素访问函数：
   - `operator[]`：通过索引访问指定位置的元素。
   - `at()`：通过索引访问指定位置的元素，并进行边界检查。
   - `front()`：返回`std::vector`的第一个元素的引用。
   - `back()`：返回`std::vector`的最后一个元素的引用。
   - `data()`：返回指向`std::vector`内部存储数据的指针。

4. 元素插入和删除函数：
   - `push_back(const T& value)`：在`std::vector`的末尾插入一个元素。
   - `pop_back()`：删除`std::vector`的末尾元素。
   - `insert(iterator pos, const T& value)`：在指定位置插入一个元素。
   - `erase(iterator pos)`：删除指定位置的元素。
   - `erase(iterator first, iterator last)`：删除范围 `[first, last)` 内的元素。
注:iterator是迭代器,vector.begin()或vector.end()
5. 查找和计数函数：
   - `find(const T& value)`：在`std::vector`中查找指定值的第一个匹配元素，并返回其迭代器。
   - `count(const T& value)`：计算`std::vector`中指定值的匹配元素数量。

6. 其他函数：
   - `clear()`：清空`std::vector`中的所有元素。
   - `swap(vector& other)`：交换两个`std::vector`的内容。

这些函数提供了广泛的功能，可以对`std::vector`进行插入、删除、查找和修改等操作。您可以根据需要选择适当的函数来操作`std::vector`并满足您的需求。

请注意，上述函数列表并非详尽无遗，还有一些其他成员函数和非成员函数可以用于更高级的操作和算法。您可以参考C++标准库的文档以获取更全面的了解。

补充: 当操作顺序表时，视情况将索引视为循环轮数(记录循环次数重要)或指针(记录指针与顺序表尾或另一个指针的位置重要)。