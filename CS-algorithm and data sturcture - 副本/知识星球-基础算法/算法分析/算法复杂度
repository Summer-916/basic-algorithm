1-渐进时间复杂度

衡量算法时间复杂度是这样进行的: T总 = ∑T单*f

其中T单指每条语句的运行时间,由计算机性能决定,因此只需要看f,即语句频度.

故衡量算法的时间复杂度由f估计,称为渐进时间复杂度,简称时间复杂度,符号为O().
O()中的表达式是T总的最简同阶无穷小.

一些符号
问题规模 n 重复语句的执行次数 f(n) 算法时间度量 T(n) = O(f(n))

基本操作:执行次数最多的基本语句 可用基本操作执行次数来估测算法时间度量

具体计算方法
(1) 找出基本操作作为基本语句
(2) 计算基本操作关于问题规模的函数f(n)
(3) 取f(n)的最大数量级来表述O(f(n)) 

结论:
时间复杂度是由嵌套最深层语句的频度决定的

时间复杂度分类:
·最坏时间复杂度(一般考虑)
·平均时间复杂度(一般考虑)
·最好时间复杂度

大O运算规则
加法规则:
T(n) = T1(n) + T2(n) = O(f(n)) + O(g(n)) = O(max(f(n),g(n)))
乘法规则:
T(n) = T1(n)*T2(n) = O(f(n))*O(g(n)) = O(f(n)*g(n))

复杂度数量递增顺序:
常数阶->对数阶->线性阶->线性对数阶->k次方阶->指数阶

2-渐进空间复杂度

空间复杂度: 算符所需储存空间的度量 S(n) = O(f(n))

总空间 = 算法本身占据空间 + 辅助空间